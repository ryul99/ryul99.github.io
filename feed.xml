<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://ryul99.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://ryul99.github.io/" rel="alternate" type="text/html" /><updated>2019-06-10T00:22:00+09:00</updated><id>http://ryul99.github.io/feed.xml</id><title type="html">Lab of ryul99</title><subtitle>Laboratory for doing what ryul99 wants
</subtitle><entry><title type="html">Github Pages deploy</title><link href="http://ryul99.github.io/category/%EC%82%BD%EC%A7%88/Github-Pages-deploy/" rel="alternate" type="text/html" title="Github Pages deploy" /><published>2019-06-09T23:43:59+09:00</published><updated>2019-06-09T23:43:59+09:00</updated><id>http://ryul99.github.io/category/%EC%82%BD%EC%A7%88/Github-Pages-deploy</id><content type="html" xml:base="http://ryul99.github.io/category/%EC%82%BD%EC%A7%88/Github-Pages-deploy/">&lt;p&gt;Github Pages는 지원되는 jekyll plugin이 정해져 있습니다. (&lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있습니다.) 때문에 깃헙에서 지원되지 않는 jekyll plugin을 사용하려면 jekyll 소스코드를 build하는 것이 아니라 빌드된 결과물을 서빙해야 합니다. 이번에는 이 방법을 몇 가지 정리해보려 합니다.&lt;/p&gt;

&lt;h1 id=&quot;subtree&quot;&gt;subtree&lt;/h1&gt;
&lt;p&gt;git subtree는 기본적으로 하나의 깃 레포 안에 다른 깃 레포가 포함되어 있는 형태입니다. 다만, subtree의 경우 포함되어 있는 하위 레포는 포함하고 있는 상위 레포에 의해 버전관리가 이루어지고 이렇게 관리된 버전을 하위 폴더의 remote에 push 혹은 pull 하기만 할 뿐입니다. Workflow는 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git subtree add --prefix {local subdirectory} {remote repo} {remote branch}&lt;/code&gt; 를 통해서 local subdirectory의 위치에 remote repo의 remote branch에서 clone받습니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git subtree [pull/push] --prefix {local subdirectory} {remote repo} {remote branch}&lt;/code&gt; 를 통해서 local subdirectory를 pull / push 할 수 있습니다.
Github Page에서 이를 활용하는 방법은 remote에 build된 결과물을 두는 브랜치를 따로 두고 이를 subtree로 사용하는 방법입니다. 저는 master를 deploy브랜치, source를 소스코드 브랜치로 두고 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;orphan-branch&quot;&gt;orphan branch&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --orphan {new branch}&lt;/code&gt;를 하면 어떤 커밋도 없는 브랜치가 new branch라는 명칭으로 생깁니다. 이를 활용해서 새로 만든 브랜치에 build된 결과물을 두고 이 브랜치를 기준으로 deploy하면 됩니다. subtree와 비교해보면 이 방법은  소스코드와 결과물의 버전관리를 각각 하게 되고 빌드한 결과물을 빼내서 다른 곳에 둔 후 checkout한 후 다시 결과물을 넣어줘야한다는 특징이 있습니다.&lt;/p&gt;</content><author><name>ryul99</name></author><category term="github" /><summary type="html">Github Pages는 지원되는 jekyll plugin이 정해져 있습니다. (여기에서 확인할 수 있습니다.) 때문에 깃헙에서 지원되지 않는 jekyll plugin을 사용하려면 jekyll 소스코드를 build하는 것이 아니라 빌드된 결과물을 서빙해야 합니다. 이번에는 이 방법을 몇 가지 정리해보려 합니다.</summary></entry><entry><title type="html">Github Pages에 구글 애드센스 달기</title><link href="http://ryul99.github.io/category/%EC%82%BD%EC%A7%88/Github-Pages%EC%97%90-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%EB%8B%AC%EA%B8%B0/" rel="alternate" type="text/html" title="Github Pages에 구글 애드센스 달기" /><published>2019-05-30T20:43:59+09:00</published><updated>2019-05-30T20:43:59+09:00</updated><id>http://ryul99.github.io/category/%EC%82%BD%EC%A7%88/Github-Pages%EC%97%90-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%EB%8B%AC%EA%B8%B0</id><content type="html" xml:base="http://ryul99.github.io/category/%EC%82%BD%EC%A7%88/Github-Pages%EC%97%90-%EA%B5%AC%EA%B8%80-%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%EB%8B%AC%EA%B8%B0/">&lt;p&gt;첫 게시글! 삽질정리를 위해 블로깅을 하기에 블로깅 하기 위해서 했던 삽질부터 올립니다.
저는 개인용으로 github pages를 처음 써서 이 블로그를 만들었습니다.&lt;/p&gt;

&lt;h1 id=&quot;문제의-시작&quot;&gt;문제의 시작…&lt;/h1&gt;
&lt;p&gt;처음에 제가 원했던 것은 마크다운 파일들만 정리해서 올리고 레포 세팅에서 테마 선택하는 것 정도로 간단하게 하는 것이었습니다.
문제는 구글 애드센스와 구글 애널리틱스 삽입..
결론부터 말하자면 &lt;strong&gt;깃헙 세팅에서 테마 선택하는 거로는 애드센스와 애널리틱스 적용이 안되더군요&lt;/strong&gt;
하지만 생각보다 애드센스와 애널리틱스 적용하는 게 어렵지는 않습니다.&lt;/p&gt;

&lt;h1 id=&quot;테마-가져오기&quot;&gt;테마 가져오기&lt;/h1&gt;
&lt;p&gt;애드센스와 애널리틱스를 적용하려면 직접 테마를 자신의 github page 레포에 가져와서 적용을 해야합니다.
찾아보니 github page는 기본적으로 Jekyll이라는 것으로 돌아가고 있고 깃헙 세팅에서 테마를 선택하는 것도 이 Jekyll 테마를 자동으로 적용해주는 것입니다.
&lt;a href=&quot;github help&quot;&gt;github help&lt;/a&gt;를 참고해보면 깃헙에서 제공하는 Jekyll 테마는 &lt;a href=&quot;https://github.com/pages-themes/&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있다는 것을 알 수 있습니다.
깃헙에서 제공되는 Jekyll 테마 외에도 Jekyll 테마는 다양한 테마가 있는데 이 들을 자신의 레포로 가져오면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-설명&quot;&gt;Jekyll 설명&lt;/h2&gt;
&lt;p&gt;이렇게 가져온 Jekyll 테마들을 사용하기 위해서 간단히 Jekyll에 대해서 알아봅시다. (저도 Jekyll에 대해서 확실히 아는 것은 아니고 삽질하면서 배운 정도가 다아니 너무 맹신하지는 말아주세요)
먼저 중요하게 보셔야 할 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;입니다. 사이트의 설정들을 담고 있는 듯 한데 뒤에서 설명할 &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;폴더 안의 html파일들을 보면 이 파일에서 변수를 가져와서 렌더링 하는 부분이 있을 수 있습니다. 때문에 가져오신 테마의 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;를 잘 이해하시고 설정해주셔야 합니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;는 실제 html를 담고 있습니다. 보통 &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;에서 사용할 코드들을 조각조각으로 가지고 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;에 있는 파일들을 이용해서 페이지를 렌더링할 수 있습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;에는 말 그대로 블로그의 글들이 담기게 됩니다. 여기에 담기는 파일들의 양식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-title.md&lt;/code&gt;이런 식으로 담기고 이 파일의 맨 위에 &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;로 감싼 부분(front matter)에서 layout과 다른 설정들을 정할 수 있습니다.
예를 들어&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title:  &quot;Github Pages에 구글 애드센스 달기&quot;
date:   2019-05-30 11:43:59 +0900
author: ryul99
categories: 삽질
tags:	github adsense
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;라고 하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;에 저장된 post.html이 적용되어 나오게 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;애드센스애널리틱스의-코드-스니펫-추가하기&quot;&gt;애드센스/애널리틱스의 코드 스니펫 추가하기&lt;/h1&gt;
&lt;p&gt;이제 마지막으로 애드센스/애널리틱스에서 준 코드 스니펫을 추가하면 됩니다!
실제 사용되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;의 파일이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;에서 사용되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;의 파일에 추가하시면 됩니다.
제가 추가했던 커밋은 &lt;a href=&quot;https://github.com/ryul99/ryul99.github.io/commit/2c77701489c15aa6de77a1eaf3d07784359ee80b&quot;&gt;여기서&lt;/a&gt; 확인하실 수 있으니 함께 참고하시면 좋을 듯 합니다.&lt;/p&gt;</content><author><name>ryul99</name></author><category term="github" /><category term="adsense" /><summary type="html">첫 게시글! 삽질정리를 위해 블로깅을 하기에 블로깅 하기 위해서 했던 삽질부터 올립니다. 저는 개인용으로 github pages를 처음 써서 이 블로그를 만들었습니다.</summary></entry></feed>